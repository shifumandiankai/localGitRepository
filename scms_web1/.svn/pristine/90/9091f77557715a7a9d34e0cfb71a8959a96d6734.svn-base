package com.tencent.business;

import org.slf4j.LoggerFactory;

import com.tencent.common.Configure;
import com.tencent.common.Log;
import com.tencent.common.Signature;
import com.tencent.common.Util;
import com.tencent.common.report.ReporterFactory;
import com.tencent.common.report.protocol.ReportReqData;
import com.tencent.common.report.service.ReportService;
import com.tencent.protocol.pay_query_protocol.ScanPayQueryReqData;
import com.tencent.protocol.pay_query_protocol.ScanPayQueryResData;
import com.tencent.protocol.unified_order.UnifiedOrderReqData;
import com.tencent.protocol.unified_order.UnifiedOrderResData;
import com.tencent.service.ScanPayQueryService;
import com.tencent.service.UnifiedOrderService;

/*
 * 
 * 生成支付二维码，支付订单查询。
 */
public class UnifiedOrderBusiness {
	
	private UnifiedOrderService unifiedService;
	
	private ScanPayQueryService scanPayQueryService;
	
	public UnifiedOrderBusiness() throws ClassNotFoundException, IllegalAccessException, InstantiationException{
		
		unifiedService  = new UnifiedOrderService();
		
		scanPayQueryService = new ScanPayQueryService();
		
	}
	
	//监听器回调
	public interface ResultListener{
		
		void onSignFail(UnifiedOrderResData resData);
		
		void onFail(UnifiedOrderResData resData);
		
		void onSuccess(UnifiedOrderResData resData);
	}
	private Log log = new Log(LoggerFactory.getLogger(UnifiedOrderBusiness.class));
	
	public void run(UnifiedOrderReqData reqData,ResultListener listener) throws Exception{
		
		String unifiedResString = null;
		
		long costTimeStart = System.currentTimeMillis();
		unifiedResString  = unifiedService.request(reqData);
		long costTimeEnd = System.currentTimeMillis();
	    long totalTimeCost = costTimeEnd - costTimeStart;
	        log.i("api请求总耗时：" + totalTimeCost + "ms");
	        //打印回包数据
	        log.i(unifiedResString);
	        
	        //将从API返回的XML数据映射到Java对象
	        UnifiedOrderResData UnifiedOrderResData = (UnifiedOrderResData) Util.getObjectFromXML(unifiedResString, UnifiedOrderResData.class);

	        //异步发送统计请求
	        //*

	        ReportReqData reportReqData = new ReportReqData(
	        		UnifiedOrderResData.getDevice_info(),
	                Configure.UNIFIED_ORDER_API,
	                (int) (totalTimeCost),//本次请求耗时
	                UnifiedOrderResData.getReturn_code(),
	                UnifiedOrderResData.getReturn_msg(),
	                UnifiedOrderResData.getResult_code(),
	                UnifiedOrderResData.getErr_code(),
	                UnifiedOrderResData.getErr_code_des(),
	                reqData.getOut_trade_no(),
	                reqData.getSpbill_create_ip()
	        );
	        long timeAfterReport;
	        if (Configure.isUseThreadToDoReport()) {
	            ReporterFactory.getReporter(reportReqData).run();
	            timeAfterReport = System.currentTimeMillis();
	            log.i("pay+report总耗时（异步方式上报）：" + (timeAfterReport - costTimeStart) + "ms");
	        } else {
	            ReportService.request(reportReqData);
	            timeAfterReport = System.currentTimeMillis();
	            log.i("pay+report总耗时（同步方式上报）：" + (timeAfterReport - costTimeStart) + "ms");
	        }

	        if (UnifiedOrderResData == null || UnifiedOrderResData.getReturn_code() == null) {
	            log.e("【失败】请仔细检测传过去的每一个参数是否合法，或是看API能否被正常访问");
	           listener.onFail(UnifiedOrderResData);;
	            return;
	        }  
	        
	        if(UnifiedOrderResData.getReturn_code().equals("FAIL")){

	        	log.e("【失败】"+UnifiedOrderResData.getReturn_msg());
	        	listener.onFail(UnifiedOrderResData);
	        	return;
		
		
	        }else{
	            //--------------------------------------------------------------------
	            //收到API的返回数据的时候得先验证一下数据有没有被第三方篡改，确保安全
	            //--------------------------------------------------------------------
	            if (!Signature.checkIsSignValidFromResponseString(unifiedResString)) {
	                log.e("支付请求API返回的数据签名验证失败，有可能数据被篡改了");
	                listener.onSignFail(UnifiedOrderResData);
	                return;
	            }
	            //业务结果成功
	            if(UnifiedOrderResData.getResult_code().equals("SUCCESS")){
	            	log.i("【下单成功】");
	            	listener.onSuccess(UnifiedOrderResData);
	            }else {
	            	log.e("【下单失败】"+UnifiedOrderResData.getErr_code_des());
	            	listener.onFail(UnifiedOrderResData);
	            	return;
	            }

	        }
	        }
	/**
     * 进行一次支付订单查询操作
     *
     * @param outTradeNo    商户系统内部的订单号,32个字符内可包含字母, [确保在商户系统唯一]
     * @return 该订单是否支付成功
     * @throws Exception
     */
    public boolean doOnePayQuery(String outTradeNo) throws Exception {


        String payQueryServiceResponseString;

        ScanPayQueryReqData scanPayQueryReqData = new ScanPayQueryReqData("",outTradeNo);
        payQueryServiceResponseString = scanPayQueryService.request(scanPayQueryReqData);

        log.i("支付订单查询API返回的数据如下：");
        log.i(payQueryServiceResponseString);

        //将从API返回的XML数据映射到Java对象
        ScanPayQueryResData scanPayQueryResData = (ScanPayQueryResData) Util.getObjectFromXML(payQueryServiceResponseString, ScanPayQueryResData.class);
        if (scanPayQueryResData == null || scanPayQueryResData.getReturn_code() == null) {
            log.i("支付订单查询请求逻辑错误，请仔细检测传过去的每一个参数是否合法");
            return false;
        }

        if (scanPayQueryResData.getReturn_code().equals("FAIL")) {
            //注意：一般这里返回FAIL是出现系统级参数错误，请检测Post给API的数据是否规范合法
            log.i("支付订单查询API系统返回失败，失败信息为：" + scanPayQueryResData.getReturn_msg());
            return false;
        } else {
            if (scanPayQueryResData.getResult_code().equals("SUCCESS")) {//业务层成功
                if (scanPayQueryResData.getTrade_state().equals("SUCCESS")) {
                    //表示查单结果为“支付成功”
                    log.i("查询到订单支付成功");
                    return true;
                } else {
                    //支付不成功
                    log.i("查询到订单支付不成功");
                    return false;
                }
            } else {
                log.i("查询出错，错误码：" + scanPayQueryResData.getErr_code() + "     错误信息：" + scanPayQueryResData.getErr_code_des());
                return false;
            }
        }
    }

	
	

}
