package com.wadejerry.scms.webservice.server;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import com.wadejerry.scms.frame.AppContext;
import com.wadejerry.scms.modules.device.dao.PfmServerMapper;
import com.wadejerry.scms.modules.device.model.PfmServer;
import com.wadejerry.scms.modules.pfm.dao.WebServiceMapper;
import com.wadejerry.scms.webservice.server.support.CommonPageRequest;
import com.wadejerry.scms.webservice.server.support.CommonResult;
import com.wadejerry.scms.webservice.server.support.pfm.AccountResult;
import com.wadejerry.scms.webservice.server.support.pfm.BoothResult;
import com.wadejerry.scms.webservice.server.support.pfm.CarResult;
import com.wadejerry.scms.webservice.server.support.pfm.CarTypeRelResult;
import com.wadejerry.scms.webservice.server.support.pfm.CarTypeResult;
import com.wadejerry.scms.webservice.server.support.pfm.CarriagewayDeviceRelResult;
import com.wadejerry.scms.webservice.server.support.pfm.CarriagewayResult;
import com.wadejerry.scms.webservice.server.support.pfm.ChargeRuleResult;
import com.wadejerry.scms.webservice.server.support.pfm.DeviceScreenResult;
import com.wadejerry.scms.webservice.server.support.pfm.EntranceResult;
import com.wadejerry.scms.webservice.server.support.pfm.LPRResult;
import com.wadejerry.scms.webservice.server.support.pfm.ParkResult;
import com.wadejerry.scms.webservice.server.support.pfm.PfmTimeResult;
import com.wadejerry.scms.webservice.server.support.pfm.SpecialCarNumResult;
import com.wadejerry.scms.webservice.server.support.pfm.SubsidiaryCarNumResult;
import com.wadejerry.scms.webservice.server.support.pfm.TaskMessageResult;
import com.wadejerry.scms.webservice.server.support.pfm.dto.AccountDto;
import com.wadejerry.scms.webservice.server.support.pfm.dto.AnshiDto;
import com.wadejerry.scms.webservice.server.support.pfm.dto.BaoqiDto;
import com.wadejerry.scms.webservice.server.support.pfm.dto.BoothDto;
import com.wadejerry.scms.webservice.server.support.pfm.dto.CarInfoDto;
import com.wadejerry.scms.webservice.server.support.pfm.dto.CarTypeDto;
import com.wadejerry.scms.webservice.server.support.pfm.dto.CarTypeRelDto;
import com.wadejerry.scms.webservice.server.support.pfm.dto.CarriagewayDeviceRelDto;
import com.wadejerry.scms.webservice.server.support.pfm.dto.CarriagewayDto;
import com.wadejerry.scms.webservice.server.support.pfm.dto.ChargeRuleDto;
import com.wadejerry.scms.webservice.server.support.pfm.dto.DaynightDto;
import com.wadejerry.scms.webservice.server.support.pfm.dto.DeviceScreenDto;
import com.wadejerry.scms.webservice.server.support.pfm.dto.EntranceDto;
import com.wadejerry.scms.webservice.server.support.pfm.dto.JianmianReleaseDto;
import com.wadejerry.scms.webservice.server.support.pfm.dto.LPRDto;
import com.wadejerry.scms.webservice.server.support.pfm.dto.ParkDto;
import com.wadejerry.scms.webservice.server.support.pfm.dto.PeriodDto;
import com.wadejerry.scms.webservice.server.support.pfm.dto.PeriodTimeDto;
import com.wadejerry.scms.webservice.server.support.pfm.dto.PertimeDto;
import com.wadejerry.scms.webservice.server.support.pfm.dto.PfmTimeDto;
import com.wadejerry.scms.webservice.server.support.pfm.dto.SpecialCarNumDto;
import com.wadejerry.scms.webservice.server.support.pfm.dto.SubsidiaryCarNumDto;
import com.wadejerry.scms.webservice.server.support.pfm.dto.TaskMessageDto;
import com.wadejerry.scms.webservice.server.support.pfm.dto.TimeChargeDto;
import com.wadejerry.scms.webservice.server.support.pfm.dto.TimeChargeTimeDto;
import com.wadejerry.scms.webservice.server.support.pfm.dto.UnitPeriodDto;
import com.wadejerry.scms.webservice.server.support.pfm.dto.UnitPeriodTimeDto;

/**
 * 停车场WebService类
 * 
 * @ClassName: PfmService
 * @Description:
 * @author zhanying
 * @date 2017年3月1日 下午2:22:03
 *
 */
public class PfmService {

	private WebServiceMapper pfmbm;

	private WebServiceMapper ensurePfmbm() {
		if (pfmbm == null) {
			pfmbm = (WebServiceMapper) AppContext.getBean("webServiceMapper");

		}
		return pfmbm;
	}

	/**
	 * 获取id获取当前及下级车场信息
	 * 
	 * @author zhanying 2017年3月1日 下午2:40:06
	 * @param @param
	 *            serverId
	 * @param @param
	 *            parkId
	 * @param @return
	 * @modificationHistory=========================逻辑或功能性重大变更记录
	 * @modify by user:
	 * @modify by reason:
	 */
	public ParkResult getParkList(int serverId, int parkId) {
		ParkResult parkResult = new ParkResult();
		PfmServerMapper serverMapper = (PfmServerMapper) AppContext.getBean("pfmServerMapper");
		PfmServer server = serverMapper.selectByPrimaryKey(serverId);
		if (server != null) {
			parkResult.setParkDtoArr(
					ensurePfmbm().selectAllParkDto(server.getBimCompanyId(), parkId).toArray(new ParkDto[0]));
			parkResult.setiRet(true);
		} else {
			parkResult.setiRet(false);
			parkResult.setStrError("serverID不存在");
		}
		return parkResult;
	}

	/**
	 * 获取车场包含的出入口信息
	 * 
	 * @author zhanying 2017年3月1日 下午2:45:47
	 * @param @param
	 *            serverId
	 * @param @param
	 *            parkIdArr
	 * @param @return
	 * @modificationHistory=========================逻辑或功能性重大变更记录
	 * @modify by user:
	 * @modify by reason:
	 */
	public EntranceResult getEntranceList(int serverId, int[] parkIdArr) {
		EntranceResult result = new EntranceResult();
		PfmServerMapper serverMapper = (PfmServerMapper) AppContext.getBean("pfmServerMapper");
		PfmServer server = serverMapper.selectByPrimaryKey(serverId);
		if (server != null && parkIdArr.length != 0) {

			result.setEntranceDtoArr(ensurePfmbm().selectAllEntranceDto(server.getBimCompanyId(), parkIdArr)
					.toArray(new EntranceDto[0]));
			result.setiRet(true);
		} else {
			result.setiRet(false);
			result.setStrError("serverID不存在或者数组长度为0");
		}
		return result;
	}

	/**
	 * 获取出入口包含的车道信息
	 * 
	 * @author zhanying 2017年3月1日 下午2:45:57
	 * @param @param
	 *            serverId
	 * @param @param
	 *            entranceIdArr
	 * @param @return
	 * @modificationHistory=========================逻辑或功能性重大变更记录
	 * @modify by user:
	 * @modify by reason:
	 */
	public CarriagewayResult getCarriageway(int serverId, int[] entranceIdArr) {
		CarriagewayResult result = new CarriagewayResult();
		PfmServerMapper serverMapper = (PfmServerMapper) AppContext.getBean("pfmServerMapper");
		PfmServer server = serverMapper.selectByPrimaryKey(serverId);
		if (server != null && entranceIdArr.length != 0) {

			result.setCarriagewayDtoArr(ensurePfmbm().selectAllCarriagewayDto(server.getBimCompanyId(), entranceIdArr)
					.toArray(new CarriagewayDto[0]));
			result.setiRet(true);
		} else {
			result.setiRet(false);
			result.setStrError("serverID不存在或者数组长度为0");
		}
		return result;
	}

	/**
	 * 获取车道与设备的关联信息
	 * 
	 * @author zhanying 2017年3月1日 下午3:01:28
	 * @param @param
	 *            serverId
	 * @param @param
	 *            carriagewayIdArr
	 * @param @return
	 * @modificationHistory=========================逻辑或功能性重大变更记录
	 * @modify by user:
	 * @modify by reason:
	 */
	public CarriagewayDeviceRelResult getCarriagewayDeviceRelList(int serverId, int[] carriagewayIdArr) {
		CarriagewayDeviceRelResult result = new CarriagewayDeviceRelResult();
		PfmServerMapper serverMapper = (PfmServerMapper) AppContext.getBean("pfmServerMapper");
		PfmServer server = serverMapper.selectByPrimaryKey(serverId);
		if (server != null && carriagewayIdArr.length != 0) {
			result.setCarriagewayDeviceRelDtoArr(ensurePfmbm().selectAllCarriagewayDeviceRelDto(carriagewayIdArr)
					.toArray(new CarriagewayDeviceRelDto[0]));
			result.setiRet(true);
		} else {
			result.setiRet(false);
			result.setStrError("serverID不存在或者数组长度为0");
		}
		return result;
	}

	/***
	 * 获取岗亭信息
	 * 
	 * @author zhanying 2017年2月8日 下午1:52:30
	 * @param @param
	 *            serverId
	 * @param @return
	 * @modificationHistory=========================逻辑或功能性重大变更记录
	 * @modify by user:
	 * @modify by reason:
	 */
	public BoothResult getBoothList(int serverId, int[] entranceIdArr) {
		// TODO 1.判断serverId是否有效 2.获取服务companyId,根据companyId获取车场下所有岗亭信息
		BoothResult r = new BoothResult();
		PfmServerMapper serverMapper = (PfmServerMapper) AppContext.getBean("pfmServerMapper");
		PfmServer server = serverMapper.selectByPrimaryKey(serverId);
		if (server != null && entranceIdArr.length != 0) {
			Integer bimcompanyId = server.getBimCompanyId();
			r.setiRet(true);
			r.setBoothDtoArr(ensurePfmbm().selectAllBoothDto(bimcompanyId, entranceIdArr).toArray(new BoothDto[0]));
		} else {
			r.setiRet(false);
			r.setStrError("server不存在或数组长度为0");
		}
		return r;
	}

	/**
	 * 获取服务管理的设备信息
	 * 
	 * @author zhanying 2017年2月8日 下午2:00:36
	 * @param @param
	 *            serverId
	 * @param @return
	 * @modificationHistory=========================逻辑或功能性重大变更记录
	 * @modify by user:
	 * @modify by reason:
	 */
	public LPRResult getDeviceByServerId(int serverId) {
		// TODO 1.判断serverId是否有效 2.获取服务serverId获取所关联的设备信息
		LPRResult r = new LPRResult();
		PfmServerMapper serverMapper = (PfmServerMapper) AppContext.getBean("pfmServerMapper");
		PfmServer server = serverMapper.selectByPrimaryKey(serverId);
		if (server != null) {
			Integer bimcompanyId = server.getBimCompanyId();
			r.setLprDtoArr((ensurePfmbm().selectAllLPRDto(bimcompanyId).toArray(new LPRDto[0])));
			r.setiRet(true);
		} else {
			r.setiRet(false);
			r.setStrError("server不存在");
		}
		return r;
	}

	/**
	 * 获取车辆信息，更具更新时间
	 * 
	 * @author zhanying 2017年2月8日 下午2:09:34
	 * @param @param
	 *            serverId
	 * @param @param
	 *            updateTime
	 * @param @return
	 * @modificationHistory=========================逻辑或功能性重大变更记录
	 * @modify by user:
	 * @modify by reason:
	 */
	public CarResult getCarInfo(int serverId, long updateTime, CommonPageRequest page, int[] parkIdArr) {
		// TODO 1.判断serverId是否有效
		// 2.获取服务companyId,根据companyId获取pfm_car_info表中updateTime
		// 大于条件updateTime的数据
		CarResult r = new CarResult();
		PfmServerMapper serverMapper = (PfmServerMapper) AppContext.getBean("pfmServerMapper");
		PfmServer server = serverMapper.selectByPrimaryKey(serverId);
		if (server != null && parkIdArr.length != 0) {
			Integer bimcompanyId = server.getBimCompanyId();
			r.setiRet(true);
			r.setPageSize(page.getPageItems());
			r.setCurrentPage(page.getReqPage());
			int allCount = ensurePfmbm().selectAllCarInfoDtoCount(bimcompanyId, new java.sql.Timestamp(updateTime),
					page, parkIdArr);
			r.setAllRow(allCount);
			r.setTotalPage(allCount % page.getPageItems() == 0 ? allCount / page.getPageItems()
					: allCount / page.getPageItems() + 1);
			if (allCount > 0) {
				r.setCarInfoDtoArr((ensurePfmbm()
						.selectAllCarInfoDto(bimcompanyId, new java.sql.Timestamp(updateTime), page, parkIdArr)
						.toArray(new CarInfoDto[0])));
				Set<Integer> carIds = new HashSet<>();
				for (CarInfoDto i : r.getCarInfoDtoArr()) {
					carIds.add(i.getCarId());
				}
				r.setSubsidiaryCarNumDtoArr(
						ensurePfmbm().selectSubsiByCarid(carIds).toArray(new SubsidiaryCarNumDto[0]));
			} else {
				r.setCarInfoDtoArr(new CarInfoDto[0]);
				r.setSubsidiaryCarNumDtoArr(new SubsidiaryCarNumDto[0]);
			}

		} else {
			r.setiRet(false);
			r.setStrError("服务器不存在或数组长度为0");
		}
		return r;

	}

	/**
	 * 获取车辆类型
	 * 
	 * @author zhanying 2017年2月8日 下午2:12:24
	 * @param @param
	 *            serverId
	 * @param @return
	 * @modificationHistory=========================逻辑或功能性重大变更记录
	 * @modify by user:
	 * @modify by reason:
	 */
	public CarTypeResult getCarType(int serverId, int[] parkIdArr) {
		// TODO 1.判断serverId是否有效 2.获取服务companyId,根据companyId获取车辆
		CarTypeResult r = new CarTypeResult();
		PfmServerMapper serverMapper = (PfmServerMapper) AppContext.getBean("pfmServerMapper");
		PfmServer server = serverMapper.selectByPrimaryKey(serverId);
		if (server != null && parkIdArr.length != 0) {
			Integer bimcompanyId = server.getBimCompanyId();
			WebServiceMapper pfmbm = ensurePfmbm();
			r.setCarTypeDtoArr((pfmbm.selectAllCarTypeDto(bimcompanyId, parkIdArr).toArray((new CarTypeDto[0]))));
			r.setiRet(true);
		} else {
			r.setiRet(false);
			r.setStrError("服务器不存在或数组长度为0");
		}
		return r;
	}

	/**
	 * 获取收费规则
	 * 
	 * @author zhanying 2017年2月8日 下午2:15:02
	 * @param @param
	 *            serverId
	 * @param @return
	 * @modificationHistory=========================逻辑或功能性重大变更记录
	 * @modify by user:
	 * @modify by reason:
	 */
	public ChargeRuleResult getChargeRule(int serverId, int[] parkIdArr) {
		// TODO 1.判断serverId是否有效 2.获取服务companyId,根据companyId 封装规则所有数据
		ChargeRuleResult r = new ChargeRuleResult();
		PfmServerMapper serverMapper = (PfmServerMapper) AppContext.getBean("pfmServerMapper");
		PfmServer server = serverMapper.selectByPrimaryKey(serverId);
		if (server != null && parkIdArr.length != 0) {
			Integer bimcompanyId = server.getBimCompanyId();
			WebServiceMapper pfmbm = ensurePfmbm();
			r.setChargeRuleDtoArr(
					(pfmbm.selectAllChargeRuleDto(bimcompanyId, parkIdArr).toArray(new ChargeRuleDto[0])));
			r.setAnshiDtoArr(pfmbm.selectAllAnshiDto(bimcompanyId, parkIdArr).toArray(new AnshiDto[0]));
			r.setBaoqiDtoArr(pfmbm.selectAllBaoqiDto(bimcompanyId, parkIdArr).toArray(new BaoqiDto[0]));
			r.setDaynightDtoArr(pfmbm.selectAllDaynightDto(bimcompanyId, parkIdArr).toArray(new DaynightDto[0]));
			r.setJianmianReleaseDtoArr(
					pfmbm.selectAllJianmianReleaseDto(bimcompanyId, parkIdArr).toArray(new JianmianReleaseDto[0]));
			r.setPeriodDtoArr(pfmbm.selectAllPeriodDto(bimcompanyId, parkIdArr).toArray(new PeriodDto[0]));
			r.setPeriodTimeArr((pfmbm.selectAllPeriodTimeDto(bimcompanyId, parkIdArr).toArray(new PeriodTimeDto[0])));
			r.setTimeChargeDtoArr(pfmbm.selectAllTimeChargeDto(bimcompanyId, parkIdArr).toArray(new TimeChargeDto[0]));
			r.setTimeChargeTimeDtoArr(
					pfmbm.selectAllTimeChargeTimeDto(bimcompanyId, parkIdArr).toArray(new TimeChargeTimeDto[0]));
			r.setUnitPeriodDtoArr(pfmbm.selectAllUnitPeriodDto(bimcompanyId, parkIdArr).toArray(new UnitPeriodDto[0]));
			r.setPertimeDtoArr(pfmbm.selectAllPertimeDto(bimcompanyId, parkIdArr).toArray(new PertimeDto[0]));
			r.setUnitPeriodTimeDtoArr(
					pfmbm.selectAllUnitPeriodTimeDto(bimcompanyId, parkIdArr).toArray(new UnitPeriodTimeDto[0]));
			r.setiRet(true);
		}

		else {
			r.setiRet(false);
			r.setStrError("服务器不存在或数组长度为0");
		}
		return r;
	}

	/***
	 * 获取车辆与类型关联表
	 * 
	 * @author zhanying 2017年2月8日 下午2:18:44
	 * @param @param
	 *            serverId
	 * @param @param
	 *            updatTime
	 * @param @return
	 * @modificationHistory=========================逻辑或功能性重大变更记录
	 * @modify by user:
	 * @modify by reason:
	 */
	public CarTypeRelResult getCarTypeRel(int serverId, long updatTime, CommonPageRequest page, int[] parkIdArr) {
		// TODO 1.判断serverId是否有效 2.获取服务companyId,根据companyId获取数据
		CarTypeRelResult r = new CarTypeRelResult();
		PfmServerMapper serverMapper = (PfmServerMapper) AppContext.getBean("pfmServerMapper");
		PfmServer server = serverMapper.selectByPrimaryKey(serverId);
		if (server != null && parkIdArr.length != 0) {
			Integer bimcompanyId = server.getBimCompanyId();
			WebServiceMapper pfmbm = ensurePfmbm();
			int allCount = pfmbm.selectAllCarTypeRelDtoCount(bimcompanyId, new java.sql.Timestamp(updatTime), page,
					parkIdArr);
			r.setAllRow(allCount);
			r.setCurrentPage(page.getReqPage());
			r.setPageSize(page.getPageItems());
			r.setTotalPage(allCount % page.getPageItems() == 0 ? allCount / page.getPageItems()
					: allCount / page.getPageItems() + 1);
			if (allCount != 0) {
				r.setCarTypeRelDtoArr(
						pfmbm.selectAllCarTypeRelDto(bimcompanyId, new java.sql.Timestamp(updatTime), page, parkIdArr)
								.toArray(new CarTypeRelDto[0]));
			} else {
				r.setCarTypeRelDtoArr(new CarTypeRelDto[0]);
			}
			r.setiRet(true);
		} else {
			r.setiRet(false);
			r.setStrError("服务器不存在或数组长度为0");
		}
		return r;

	}

	/**
	 * 获取账户信息
	 * 
	 * @author zhanying 2017年2月8日 下午2:21:08
	 * @param @param
	 *            serverId
	 * @param @param
	 *            updateTime
	 * @param @return
	 * @modificationHistory=========================逻辑或功能性重大变更记录
	 * @modify by user:
	 * @modify by reason:
	 */
	public AccountResult getAccountInfo(int serverId, long updateTime, CommonPageRequest page, int[] parkIdArr) {
		AccountResult r = new AccountResult();
		PfmServerMapper serverMapper = (PfmServerMapper) AppContext.getBean("pfmServerMapper");
		PfmServer server = serverMapper.selectByPrimaryKey(serverId);
		if (server != null && parkIdArr.length != 0) {
			WebServiceMapper pfmbm = ensurePfmbm();
			int bimcompanyId = server.getBimCompanyId();
			int allCount = pfmbm.selectAllAccountDtoCount(bimcompanyId, new java.sql.Timestamp(updateTime), page,
					parkIdArr);
			r.setAllRow(allCount);
			r.setCurrentPage(page.getReqPage());
			r.setPageSize(page.getPageItems());
			r.setTotalPage(allCount % page.getPageItems() == 0 ? allCount / page.getPageItems()
					: allCount / page.getPageItems() + 1);
			if (allCount != 0) {
				r.setAccountDtoArr(
						pfmbm.selectAllAccountDto(bimcompanyId, new java.sql.Timestamp(updateTime), page, parkIdArr)
								.toArray(new AccountDto[0]));
			} else {
				r.setAccountDtoArr(new AccountDto[0]);
			}
			r.setiRet(true);
		} else {
			r.setiRet(false);
			r.setStrError("服务器不存在或数组长度为0");
		}
		return r;

	}

	/**
	 * 获取通行时段
	 * 
	 * @author zhanying 2017年2月8日 下午3:56:37
	 * @param @param
	 *            serverId
	 * @param @return
	 * @modificationHistory=========================逻辑或功能性重大变更记录
	 * @modify by user:
	 * @modify by reason:
	 */
	public PfmTimeResult getPfmTime(int serverId) {
		PfmTimeResult r = new PfmTimeResult();
		PfmServerMapper serverMapper = (PfmServerMapper) AppContext.getBean("pfmServerMapper");
		PfmServer server = serverMapper.selectByPrimaryKey(serverId);
		if (server != null) {
			Integer bimcompanyId = server.getBimCompanyId();
			WebServiceMapper pfmbm = (WebServiceMapper) AppContext.getBean("webServiceMapper");
			r.setiRet(true);
			r.setPfmTimeDtoArr(pfmbm.selectAllPfmTimeDto(bimcompanyId).toArray((new PfmTimeDto[0])));
		} else {
			r.setiRet(false);
			r.setStrError("服务器不存在或数组长度为0");
		}
		return r;
	}

	/**
	 * 更新使用的车位数量
	 * 
	 * @author zhanying 2017年3月2日 下午2:52:25
	 * @param @param
	 *            serverId
	 * @param @param
	 *            useParkSpacesCoun
	 * @param @param
	 *            parkId
	 * @param @return
	 * @modificationHistory=========================逻辑或功能性重大变更记录
	 * @modify by user:
	 * @modify by reason:
	 */
	public CommonResult updateParkSpaces(int serverId, int useParkSpacesCoun, int parkId) {
		return new CommonResult();
	}

	/**
	 * 获取显示屏设备信息
	 * 
	 * @author zhanying 2017年5月2日 下午1:50:19
	 * @param @param
	 *            serverId
	 * @param @return
	 * @modificationHistory=========================逻辑或功能性重大变更记录
	 * @modify by user:
	 * @modify by reason:
	 */
	public DeviceScreenResult getDeviceScreen(int serverId) {
		DeviceScreenResult r = new DeviceScreenResult();
		PfmServerMapper serverMapper = (PfmServerMapper) AppContext.getBean("pfmServerMapper");
		PfmServer server = serverMapper.selectByPrimaryKey(serverId);
		if (server != null) {
			Integer bimcompanyId = server.getBimCompanyId();
			WebServiceMapper pfmbm = (WebServiceMapper) AppContext.getBean("webServiceMapper");
			r.setiRet(true);
			r.setDeviceScreenDtoArr(pfmbm.selectAllDeviceScreen(bimcompanyId).toArray(new DeviceScreenDto[0]));
		} else {
			r.setiRet(false);
			r.setStrError("服务器不存在或数组长度为0");
		}
		return r;
	
	}

	/**
	 * 获取计划信息
	 * 
	 * @author zhanying 2017年5月2日 下午1:50:39
	 * @param @param
	 *            serverId
	 * @param @return
	 * @modificationHistory=========================逻辑或功能性重大变更记录
	 * @modify by user:
	 * @modify by reason:
	 */
	public TaskMessageResult getTaskMessage(int serverId) {
		TaskMessageResult result = new TaskMessageResult();
		PfmServerMapper serverMapper = (PfmServerMapper) AppContext.getBean("pfmServerMapper");
		PfmServer server = serverMapper.selectByPrimaryKey(serverId);
		if (server != null) {
			Integer bimcompanyId = server.getBimCompanyId();
			WebServiceMapper pfmbm = (WebServiceMapper) AppContext.getBean("webServiceMapper");
			result.setiRet(true);
			result.setTaskMessageDtoArr(pfmbm.selectAllTaskMessage(bimcompanyId).toArray(new TaskMessageDto[0]));
		} else {
			result.setiRet(false);
			result.setStrError("服务器不存在或数组长度为0");
		}
		return result;
	}
	
	/**
	* 获取特殊车牌
	* @author zhanying 2017年5月15日 下午7:55:37
	* @param  @param serverId
	* @param  @param updateTime
	* @param  @return 
	* @modificationHistory=========================逻辑或功能性重大变更记录
	* @modify by user: 
	* @modify by reason:
	 */
	public SpecialCarNumResult  getSpecialCarNum(int serverId, long updateTime){
		
		SpecialCarNumResult result = new SpecialCarNumResult();
		PfmServerMapper serverMapper = (PfmServerMapper) AppContext.getBean("pfmServerMapper");
		PfmServer server = serverMapper.selectByPrimaryKey(serverId);
		if (server != null) {
			Integer bimcompanyId = server.getBimCompanyId();
			WebServiceMapper pfmbm = (WebServiceMapper) AppContext.getBean("webServiceMapper");
			result.setiRet(true);
			result.setSpecialCarNumDtoArr(pfmbm.selectAllSpecial(bimcompanyId, new Date(updateTime)).toArray(new SpecialCarNumDto[0]));
		} else {
			result.setiRet(false);
			result.setStrError("服务器不存在或数组长度为0");
		}
		return result;
	}

	/**
	* 根据车辆id获取相关联的附属车牌
	* @author zhanying 2017年5月16日 上午11:06:14
	* @param  @param serverId
	* @param  @param carId
	* @param  @return 
	* @modificationHistory=========================逻辑或功能性重大变更记录
	* @modify by user: 
	* @modify by reason:
	 */
	public SubsidiaryCarNumResult getSubsidiaryCarNumByCarId(int serverId,int carId){
	
		SubsidiaryCarNumResult result = new SubsidiaryCarNumResult();
		PfmServerMapper serverMapper = (PfmServerMapper) AppContext.getBean("pfmServerMapper");
		PfmServer server = serverMapper.selectByPrimaryKey(serverId);
		if (server != null) {
			//Integer bimcompanyId = server.getBimCompanyId();
			WebServiceMapper pfmbm = (WebServiceMapper) AppContext.getBean("webServiceMapper");
			result.setiRet(true);
			result.setSubsidiaryCarNumArr(pfmbm.selectAllSubsidiaryCarNum(carId).toArray(new String[0]));
		} else {
			result.setiRet(false);
			result.setStrError("服务器不存在或数组长度为0");
		}
		return result;
	}
}
