package com.wadejerry.scms.modules.pfm.controller;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.ss.usermodel.Workbook;
import org.codehaus.jettison.json.JSONException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.wadejerry.scms.frame.Authority.AuthorityGetter;
import com.wadejerry.scms.frame.entity.DataTableDto;
import com.wadejerry.scms.frame.entity.ExportTemplate;
import com.wadejerry.scms.frame.entity.LoginInfo;
import com.wadejerry.scms.frame.entity.ReportPageParamsDto;
import com.wadejerry.scms.frame.entity.SelectDataDto;
import com.wadejerry.scms.modules.pfm.dao.PfmCarriagewayDeviceRelMapper;
import com.wadejerry.scms.modules.pfm.dao.PfmEntranceMapper;
import com.wadejerry.scms.modules.pfm.dto.ZEntranceTreeDto;
import com.wadejerry.scms.modules.pfm.dto.PfmRecordDto;
import com.wadejerry.scms.modules.pfm.model.PfmCarriageway;
import com.wadejerry.scms.modules.pfm.model.PfmChargeRecord;
import com.wadejerry.scms.modules.pfm.model.PfmEntrance;
import com.wadejerry.scms.modules.pfm.model.PfmCarType;
import com.wadejerry.scms.modules.pfm.service.PfmCarTypeService;
import com.wadejerry.scms.modules.pfm.service.EntranceService;
import com.wadejerry.scms.modules.pfm.service.PfmCarriagewayService;
import com.wadejerry.scms.modules.pfm.service.PfmChargeRecordReportService;
import com.wadejerry.scms.modules.pfm.service.PfmRecordService;
import com.wadejerry.scms.utils.AjaxUtil;

@Controller
public class ChargeRecordReportController {
	@Autowired
	private HttpServletRequest request;
	@Autowired
	private HttpServletResponse response;
	@Autowired
	private PfmChargeRecordReportService chargeRecordService;
	@Autowired
	private PfmRecordService pfmRecordService;
	@Autowired
	private PfmEntranceMapper entranceMapper;
	@Autowired
	private EntranceService entranceService;
	@Autowired
	private PfmCarriagewayService pfmCarriagewayService;
	@Autowired
	private PfmCarriagewayDeviceRelMapper pfmCarriagewayDeviceRelMapper;
	@Autowired
	private AuthorityGetter authorityGetter;
	@Autowired
	private PfmCarTypeService PfmCarTypeService;
	
	
	@RequestMapping("/report/selectAllListByPage.do")
	@ResponseBody
	public void GetChargeRecordInfoByPage() throws ParseException, JSONException{
		List<Integer> listtype=authorityGetter.carTypeAuth();
		ReportPageParamsDto paramsDto=ReportPageParamsDto.GetParamsDtoByRequest(request);
		//String val=request.getParameter("columns[0][search][value]");
		int iTotal=0;
		Date startTime=null;
		Date endTime=null;
		String carNumber=null;
		Integer parkId=null;
		Integer entranceId=null;
		Integer carriagewayId=null;
	    List<Integer> listtypeId=null;
	    List<Integer> listentranceId=null;
	    String size=null;
		String hasPermission=null;
		
		if(paramsDto.getSearchValue0()!=null){
			startTime=paramsDto.getSearchValue0();
		}
		if(paramsDto.getSearchValue1()!=null){
			endTime=paramsDto.getSearchValue1();
		}
		if(paramsDto.getSearchValue2()!=null&&!paramsDto.getSearchValue2().equals("")){
			carNumber=paramsDto.getSearchValue2();
		}
		if(paramsDto.getSearchValue6()!=null&&!paramsDto.getSearchValue6().equals("")){
			parkId=paramsDto.getIntValue4();
		}
		if(paramsDto.getSearchValue7()!=null&&!paramsDto.getSearchValue7().equals("")){
			entranceId=paramsDto.getIntValue5();
		}
		if(paramsDto.getSearchValue8()!=null&&!paramsDto.getSearchValue8().equals("")){
			carriagewayId=paramsDto.getIntValue7();
		}
		if(paramsDto.getEntranceIdList()!=null&&paramsDto.getEntranceIdList().size()>0){
			listentranceId=paramsDto.getEntranceIdList();
		}
		if(listtype!=null){//不是企业管理员，需要权限
			if(listtype.size()>0){
				listtypeId=listtype;
				paramsDto.setListType(listtype);
			}else{
				size="1";
				paramsDto.setSize("1");
			}
		}
		/*if(paramsDto.getHasPermission()!=null&&!paramsDto.getHasPermission().equals("")){
			hasPermission=paramsDto.getHasPermission();
		}*/
		List<PfmChargeRecord> dtolist=null;
		iTotal=chargeRecordService.selectRecordTotal(startTime,endTime,carNumber,parkId,listentranceId,carriagewayId,listtypeId,hasPermission,size);
		if(iTotal>0){
			if(paramsDto.getLength()==-1){
				paramsDto.setLength(iTotal);  //查询所有记录
			}
			
			dtolist=chargeRecordService.selectAllListByPage(paramsDto);
			
		}
		DataTableDto data = new DataTableDto(); // 返回数据封装
		data.setDataList(dtolist);
		data.setDraw(paramsDto.getDraw());
		data.setRecordsFiltered(iTotal);
		data.setRecordsTotal(iTotal);
		AjaxUtil.ajaxWriteDataTable(data, response);
	}
	
	@RequestMapping("/report/selectNormalListByPage.do")
	@ResponseBody
	public void GetNormalInfoByPage() throws ParseException, JSONException{
		//PageParamsDto paramsDto = PageParamsDto.GetParamsDtoByRequest(request); // 获取分页参数
		List<Integer> listtype=authorityGetter.carTypeAuth();
		ReportPageParamsDto paramsDto=ReportPageParamsDto.GetParamsDtoByRequest(request);
		int iTotal=0;
		Date startTime=null;
		Date endTime=null;
		String carNumber=null;
		Integer parkId=null;
		Integer entranceId=null;
		Integer carriagewayId=null;
		Integer onlyentrance=null;
		Integer direction=null;
		List<Integer> listtypeId=null;
		List<Integer> listentranceId=null;
	    String size=null;
		String hasPermission=null;
		List<PfmRecordDto> dtolist=null;
		if(paramsDto.getSearchValue0()!=null){
			startTime=paramsDto.getSearchValue0();
		}
		if(paramsDto.getSearchValue1()!=null){
			endTime=paramsDto.getSearchValue1();
		}
		if(paramsDto.getSearchValue2()!=null&&!paramsDto.getSearchValue2().equals("")){
			carNumber=paramsDto.getSearchValue2();
		}
		if(paramsDto.getSearchValue6()!=null&&!paramsDto.getSearchValue6().equals("")){
			parkId=paramsDto.getIntValue4();
		}
		if(paramsDto.getEntranceIdList()!=null&&paramsDto.getEntranceIdList().size()>0){
			listentranceId=paramsDto.getEntranceIdList();
		}
		if(paramsDto.getSearchValue8()!=null&&!paramsDto.getSearchValue8().equals("")){
			carriagewayId=paramsDto.getIntValue7();
		}
		if(paramsDto.getSearchValue3()!=null){
			onlyentrance=paramsDto.getIntValue1();
		}
		if(paramsDto.getSearchValue4()!=null){
			direction=paramsDto.getIntValue2();
		}
		if(listtype!=null){//不是企业管理员，需要权限
			if(listtype.size()>0){
				listtypeId=listtype;
				paramsDto.setListType(listtype);
			}else{
				size="1";
				paramsDto.setSize("1");
			}
		}
		/*if(paramsDto.getHasPermission()!=null&&!paramsDto.getHasPermission().equals("")){
			hasPermission=paramsDto.getHasPermission();
		}*/
		iTotal=pfmRecordService.selectRecordTotal(startTime,endTime,carNumber,onlyentrance,direction,parkId,listentranceId,carriagewayId,listtypeId,hasPermission,size);
		if(iTotal>0){
			if(paramsDto.getLength()==-1){
				paramsDto.setLength(iTotal);  //查询所有记录
			}
			dtolist=pfmRecordService.selectAllListByPage(paramsDto);
			
		}
		DataTableDto data = new DataTableDto(); // 返回数据封装
		data.setDataList(dtolist);
		data.setDraw(paramsDto.getDraw());
		data.setRecordsFiltered(iTotal);
		data.setRecordsTotal(iTotal);
		AjaxUtil.ajaxWriteDataTable(data, response);
	}
	@RequestMapping("/report/selectabNormalListByPage.do")
	@ResponseBody
	public void GetAbNormalInfoByPage() throws ParseException, JSONException{
		List<Integer> listtype=authorityGetter.carTypeAuth();
		ReportPageParamsDto paramsDto=ReportPageParamsDto.GetParamsDtoByRequest(request);
		int iTotal=0;
		Date startTime=null;
		Date endTime=null;
		Integer parkId=null;
		Integer entranceId=null;
		Integer carriagewayId=null;
		Integer onlyentrance=null;
		Integer direction=null;
		List<Integer> listtypeId=null;
		List<Integer> listentranceId=null;
	    String size=null;
		String hasPermission=null;
		List<PfmRecordDto> dtolist=null;
		if(paramsDto.getSearchValue0()!=null){
			startTime=paramsDto.getSearchValue0();
		}
		if(paramsDto.getSearchValue1()!=null){
			endTime=paramsDto.getSearchValue1();
		}
		if(paramsDto.getSearchValue3()!=null){
			onlyentrance=paramsDto.getIntValue1();
		}
		if(paramsDto.getSearchValue4()!=null){
			direction=paramsDto.getIntValue2();
		}
		if(paramsDto.getSearchValue6()!=null&&!paramsDto.getSearchValue6().equals("")){
			parkId=paramsDto.getIntValue4();
		}
		if(paramsDto.getEntranceIdList()!=null&&paramsDto.getEntranceIdList().size()>0){
			listentranceId=paramsDto.getEntranceIdList();
		}
		if(paramsDto.getSearchValue8()!=null&&!paramsDto.getSearchValue8().equals("")){
			carriagewayId=paramsDto.getIntValue7();
		}
		if(listtype!=null){//不是企业管理员，需要权限
			if(listtype.size()>0){
				listtypeId=listtype;
				paramsDto.setListType(listtype);
			}else{
				size="1";
				paramsDto.setSize("1");
			}
		}
		/*if(paramsDto.getHasPermission()!=null&&!paramsDto.getHasPermission().equals("")){
			hasPermission=paramsDto.getHasPermission();
		}*/
		iTotal=pfmRecordService.selectabNormalRecordTotal(startTime,endTime,onlyentrance,direction,parkId,listentranceId,carriagewayId,listtypeId,hasPermission,size);
		if(iTotal>0){
			if(paramsDto.getLength()==-1){
				paramsDto.setLength(iTotal);  //查询所有记录
			}
			dtolist=pfmRecordService.selectabNormalListByPage(paramsDto);
			/*for(pfmRecordDto temp:dtolist){
			if(temp.getDirection()==1){
				temp.setStrdirection("进");
			}else{
				temp.setStrdirection("出");
			}
			}*/
		}
		DataTableDto data = new DataTableDto(); // 返回数据封装
		data.setDataList(dtolist);
		data.setDraw(paramsDto.getDraw());
		data.setRecordsFiltered(iTotal);
		data.setRecordsTotal(iTotal);
		AjaxUtil.ajaxWriteDataTable(data, response);
	}
	
	@RequestMapping("/report/parkreport/selectListByPage.do")
	@ResponseBody
	public void SelectParkListByPage() throws ParseException, JSONException{
		List<Integer> listtype=authorityGetter.carTypeAuth();
		ReportPageParamsDto paramsDto=ReportPageParamsDto.GetParamsDtoByRequest(request);
		int iTotal=0;
		Date startTime=null;
		Date endTime=null;
		String carNumber=null;
		Integer parkId=null;
		Integer entranceId=null;
		Integer carriagewayId=null;
		Integer carType=null;
		//Integer carType=0;
		List<PfmRecordDto> dtolist=null;
		List<Integer> listtypeId=null;
		List<Integer> listentranceId=null;
	    String size=null;
		String hasPermission=null;
		if(paramsDto.getSearchValue0()!=null){
			startTime=paramsDto.getSearchValue0();
		}
		if(paramsDto.getSearchValue1()!=null){
			endTime=paramsDto.getSearchValue1();
		}
		if(paramsDto.getSearchValue2()!=null&&!paramsDto.getSearchValue2().equals("")){
			carNumber=paramsDto.getSearchValue2();
		}
		if(paramsDto.getIntValue3()!=0){
			carType=paramsDto.getIntValue3();
		}
		if(paramsDto.getSearchValue6()!=null&&!paramsDto.getSearchValue6().equals("")){
			parkId=paramsDto.getIntValue4();
		}
		if(paramsDto.getEntranceIdList()!=null&&paramsDto.getEntranceIdList().size()>0){
			listentranceId=paramsDto.getEntranceIdList();
		}
		if(paramsDto.getSearchValue8()!=null&&!paramsDto.getSearchValue8().equals("")){
			carriagewayId=paramsDto.getIntValue7();
		}
		if(listtype!=null){//不是企业管理员，需要权限
			if(listtype.size()>0){
				listtypeId=listtype;
				paramsDto.setListType(listtype);
			}else{
				size="1";
				paramsDto.setSize("1");
			}
		}
		/*if(paramsDto.getHasPermission()!=null&&!paramsDto.getHasPermission().equals("")){
			hasPermission=paramsDto.getHasPermission();
		}*/
		iTotal=pfmRecordService.selectParkReportTotal(startTime,endTime,carNumber,parkId,listentranceId,carriagewayId,carType,listtypeId,hasPermission,size);
		if(iTotal>0){
			if(paramsDto.getLength()==-1){
				paramsDto.setLength(iTotal);  //查询所有记录
			}
			dtolist=pfmRecordService.selectAllParkReportListByPage(paramsDto);
		}
		DataTableDto data = new DataTableDto(); // 返回数据封装
		data.setDataList(dtolist);
		data.setDraw(paramsDto.getDraw());
		data.setRecordsFiltered(iTotal);
		data.setRecordsTotal(iTotal);
		AjaxUtil.ajaxWriteDataTable(data, response);
	}
	
	@RequestMapping("/report/configentranceName.do")
	@ResponseBody
	public void configentranceName(){
		List<PfmEntrance> entrancelist=entranceMapper.configName(LoginInfo.getCompanyId());
		SelectDataDto selectDto=null;
		List<SelectDataDto> list=new ArrayList<SelectDataDto>();
		SelectDataDto dataDto=new SelectDataDto();
		/*dataDto.setId(0);
		dataDto.setText("无");
		list.add(dataDto);*/
		if(entrancelist.size()!=0){
			for(PfmEntrance temp:entrancelist){
				selectDto=new SelectDataDto();
				selectDto.setId(temp.getPfmEntranceId());
				selectDto.setText(temp.getEntranceName());
				list.add(selectDto);
			}
			AjaxUtil.ajaxWriteObject(list, response);
			return;
		}
	}
	
	
	@RequestMapping("/report/exportcharge.do")
	@ResponseBody
	public void ExportCharge(){
		//OperateResult o = new OperateResult();
		List<Integer> listtype=authorityGetter.carTypeAuth();
		List<Integer> listTypeId=null;
		String size=null;
		if(listtype!=null){//不是企业管理员，需要权限
			if(listtype.size()>0){
				listTypeId=listtype;
			}else{
				size="1";
				
			}
		}
		//String a=formdata;
		String path = request.getSession().getServletContext().getRealPath("\\WEB-INF\\download");
		File file= new File(path);
		if(!file.exists()){
			file.mkdir();
		}
		path+="\\";
		path+=new Date().getTime();
		path+=".xls";
		file= new File(path);
		if(file.exists()){
			file.delete();
		}
		List<Map<String,Object>> data=chargeRecordService.exportcharge(listTypeId,size);
		String[] head = {"车牌","车主姓名","车辆类型","收费规则","停车时长","收费金额","减免金额","减免规则","收费员","入场时间","出场时间"};
		String[] column={"car_number","person_name","car_type_name","rule_name","parking_duration","charge_fee","jianmian_fee","jianmian_rule_name","user_name","in_time","out_time"};
		Workbook  wb =null;
		OutputStream out = null;
		try{
			file.createNewFile();
			out = new FileOutputStream(file);
			wb =ExportTemplate.write(data, head,column);
			wb.write(out);

		}
		catch(Exception e){
			
			return ;

		}
		finally{
			if(out!=null)
				try {
					out.close();
				} catch (IOException e) {
					
					e.printStackTrace();
				}
		}
		InputStream input = null;
		try {
			input = new BufferedInputStream(new FileInputStream(file));
			response.reset();
			// 先去掉文件名称中的空格,然后转换编码格式为utf-8,保证不出现乱码,这个文件名称用于浏览器的下载框中自动显示的文件名
			response.addHeader("Content-Disposition", "attachment;filename=" + new String((new Date().getTime()+".xls").replaceAll(" ", "").getBytes("utf-8"),"iso8859-1"));
			response.addHeader("Content-Length", "" + file.length());
			response.setContentType("application/octet-stream");
			out = new BufferedOutputStream(response.getOutputStream());
			byte[] bytes = new byte[1024];
			int length=0;
			while((length=input.read(bytes))!=-1){
				out.write(bytes, 0, length);
			}
			

		} catch (IOException e) {
			
			e.printStackTrace();
		}
		finally{
			if(out!=null)
				try {
					out.close();
				} catch (IOException e) {
					
					e.printStackTrace();
				}
			if(input!=null)
				try {
					input.close();
				} catch (IOException e) {
				
					e.printStackTrace();
				}
			file.delete();
		}

	}
	
	@RequestMapping("/report/exportnormal.do")
	@ResponseBody
	public void ExportNormal(){
		//OperateResult o = new OperateResult();
		List<Integer> listtype=authorityGetter.carTypeAuth();
		List<Integer> listTypeId=null;
		String size=null;
		if(listtype!=null){//不是企业管理员，需要权限
			if(listtype.size()>0){
				listTypeId=listtype;
			}else{
				size="1";
			}
		}
		String path = request.getSession().getServletContext().getRealPath("\\WEB-INF\\download");
		File file= new File(path);
		if(!file.exists()){
			file.mkdir();
		}
		path+="\\";
		path+=new Date().getTime();
		path+=".xls";
		file= new File(path);
		if(file.exists()){
			file.delete();
		}
		List<Map<String,Object>> data=pfmRecordService.exportcharge(listTypeId,size);
		String[] head = {"车牌","进出方向","车主姓名","车辆类型","车场","出入口","通行时间","车道","岗亭","设备","卡号","操作员"};
		String[] column={"car_number","direction","person_name","car_type_name","park_name","entrance_name","event_time","carriageway_name","booth_name","device_name","card_id","user_name"};
		Workbook  wb =null;
		OutputStream out = null;
		try{
			file.createNewFile();
			out = new FileOutputStream(file);
			wb =ExportTemplate.write(data, head,column);
			wb.write(out);

		}
		catch(Exception e){
			
			return ;

		}
		finally{
			if(out!=null)
				try {
					out.close();
				} catch (IOException e) {
					
					e.printStackTrace();
				}
		}
		InputStream input = null;
		try {
			input = new BufferedInputStream(new FileInputStream(file));
			response.reset();
			// 先去掉文件名称中的空格,然后转换编码格式为utf-8,保证不出现乱码,这个文件名称用于浏览器的下载框中自动显示的文件名
			response.addHeader("Content-Disposition", "attachment;filename=" + new String((new Date().getTime()+".xls").replaceAll(" ", "").getBytes("utf-8"),"iso8859-1"));
			response.addHeader("Content-Length", "" + file.length());
			response.setContentType("application/octet-stream");
			out = new BufferedOutputStream(response.getOutputStream());
			byte[] bytes = new byte[1024];
			int length=0;
			while((length=input.read(bytes))!=-1){
				out.write(bytes, 0, length);
			}
			

		} catch (IOException e) {
			
			e.printStackTrace();
		}
		finally{
			if(out!=null)
				try {
					out.close();
				} catch (IOException e) {
					
					e.printStackTrace();
				}
			if(input!=null)
				try {
					input.close();
				} catch (IOException e) {
				
					e.printStackTrace();
				}
			file.delete();
		}

	}
	
	@RequestMapping("/report/exportabnormal.do")
	@ResponseBody
	public void ExportAbnormal(){
		//OperateResult o = new OperateResult();
		List<Integer> listtype=authorityGetter.carTypeAuth();
		List<Integer> listTypeId=null;
		String size=null;
		if(listtype!=null){//不是企业管理员，需要权限
			if(listtype.size()>0){
				listTypeId=listtype;
			}else{
				size="1";
			}
		}
		String path = request.getSession().getServletContext().getRealPath("\\WEB-INF\\download");
		File file= new File(path);
		if(!file.exists()){
			file.mkdir();
		}
		path+="\\";
		path+=new Date().getTime();
		path+=".xls";
		file= new File(path);
		if(file.exists()){
			file.delete();
		}
		List<Map<String,Object>> data=pfmRecordService.exportabnormal(listTypeId,size);
		String[] head = {"进出方向","通行时间","车场","出入口","车道","岗亭","设备","操作员"};
		String[] column={"direction","event_time","park_name","entrance_name","carriageway_name","booth_name","device_name","user_name"};
		Workbook  wb =null;
		OutputStream out = null;
		try{
			file.createNewFile();
			out = new FileOutputStream(file);
			wb =ExportTemplate.write(data, head,column);
			wb.write(out);

		}
		catch(Exception e){
			
			return ;

		}
		finally{
			if(out!=null)
				try {
					out.close();
				} catch (IOException e) {
					
					e.printStackTrace();
				}
		}
		InputStream input = null;
		try {
			input = new BufferedInputStream(new FileInputStream(file));
			response.reset();
			// 先去掉文件名称中的空格,然后转换编码格式为utf-8,保证不出现乱码,这个文件名称用于浏览器的下载框中自动显示的文件名
			response.addHeader("Content-Disposition", "attachment;filename=" + new String((new Date().getTime()+".xls").replaceAll(" ", "").getBytes("utf-8"),"iso8859-1"));
			response.addHeader("Content-Length", "" + file.length());
			response.setContentType("application/octet-stream");
			out = new BufferedOutputStream(response.getOutputStream());
			byte[] bytes = new byte[1024];
			int length=0;
			while((length=input.read(bytes))!=-1){
				out.write(bytes, 0, length);
			}
			

		} catch (IOException e) {
			
			e.printStackTrace();
		}
		finally{
			if(out!=null)
				try {
					out.close();
				} catch (IOException e) {
					
					e.printStackTrace();
				}
			if(input!=null)
				try {
					input.close();
				} catch (IOException e) {
				
					e.printStackTrace();
				}
			file.delete();
		}

	}
	
	@RequestMapping("/report/parkreport/export.do")
	@ResponseBody
	public void Export(){
		//OperateResult o = new OperateResult();
		List<Integer> listtype=authorityGetter.carTypeAuth();
		List<Integer> listTypeId=null;
		String size=null;
		if(listtype!=null){//不是企业管理员，需要权限
			if(listtype.size()>0){
				listTypeId=listtype;
			}else{
				size="1";
			}
		}
		String path = request.getSession().getServletContext().getRealPath("\\WEB-INF\\download");
		File file= new File(path);
		if(!file.exists()){
			file.mkdir();
		}
		path+="\\";
		path+=new Date().getTime();
		path+=".xls";
		file= new File(path);
		if(file.exists()){
			file.delete();
		}
		List<Map<String,Object>> data=pfmRecordService.exportParkReport(listTypeId,size);
		String[] head = {"车牌","进出方向","车主姓名","车辆类型","车场","出入口","通行时间","车道","岗亭","设备","卡号","操作员"};
		String[] column={"car_number","direction","person_name","car_type_name","park_name","entrance_name","event_time","carriageway_name","booth_name","device_name","card_id","user_name"};
		Workbook  wb =null;
		OutputStream out = null;
		try{
			file.createNewFile();
			out = new FileOutputStream(file);
			wb =ExportTemplate.write(data, head,column);
			wb.write(out);

		}
		catch(Exception e){
			
			return ;

		}
		finally{
			if(out!=null)
				try {
					out.close();
				} catch (IOException e) {
					
					e.printStackTrace();
				}
		}
		InputStream input = null;
		try {
			input = new BufferedInputStream(new FileInputStream(file));
			response.reset();
			// 先去掉文件名称中的空格,然后转换编码格式为utf-8,保证不出现乱码,这个文件名称用于浏览器的下载框中自动显示的文件名
			response.addHeader("Content-Disposition", "attachment;filename=" + new String((new Date().getTime()+".xls").replaceAll(" ", "").getBytes("utf-8"),"iso8859-1"));
			response.addHeader("Content-Length", "" + file.length());
			response.setContentType("application/octet-stream");
			out = new BufferedOutputStream(response.getOutputStream());
			byte[] bytes = new byte[1024];
			int length=0;
			while((length=input.read(bytes))!=-1){
				out.write(bytes, 0, length);
			}
			

		} catch (IOException e) {
			
			e.printStackTrace();
		}
		finally{
			if(out!=null)
				try {
					out.close();
				} catch (IOException e) {
					
					e.printStackTrace();
				}
			if(input!=null)
				try {
					input.close();
				} catch (IOException e) {
				
					e.printStackTrace();
				}
			file.delete();
		}

	}
	@RequestMapping("/report/parkreport/configCarType.do")
	@ResponseBody
	public void configCarType(){
		List<PfmCarType> carTypelist=PfmCarTypeService.configParkReport();
		SelectDataDto selectDto=null;
		List<SelectDataDto> list=new ArrayList<SelectDataDto>();
		SelectDataDto dataDto=new SelectDataDto();
		dataDto.setId(0);
		dataDto.setText("全部");
		list.add(dataDto);
		if(carTypelist.size()!=0){
			for(PfmCarType temp:carTypelist){
				selectDto=new SelectDataDto();
				selectDto.setId(temp.getCarTypeId());
				selectDto.setText(temp.getTypeName());
				list.add(selectDto);
			}
			AjaxUtil.ajaxWriteObject(list, response);
			return;
		}
	}
}
